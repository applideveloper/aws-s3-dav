var config = {

    "accessKeyId":     "AKIAJDN3F53EQUB2N3CA",
    "secretAccessKey": "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"

};

var aws    = require('aws-sdk');
var when   = require('when');

aws.util.isBrowser = function() { return false; };
var s3 = new aws.S3(config);

(function(aws, global) {

    global.Bucket = Bucket;

    var bucketCache = [];

    /**
     * Constructor
     * @param AWS.S3 instance
     */
    function Bucket(bucketObject) {
        this._bucket  = bucketObject;
        this._objects = null;
    }

    /**
     * Get Bucket list
     * @access static
     * @return deferred
     */
    Bucket.getBucketList = function() {
        var deferred = when.defer(),
            buckets  = [];

        if ( bucketCache.length > 0 ) {
            deferred.resolve(bucketCahce);
        } else {
            aws.listBuckets({}, function(err, data) {
                if ( err ) {
                    deferred.reject(err);
                } else {
                    data.Buckets.forEach(function(bucket) {
                        buckets.push(new Bucket(bucket));
                    });
                    bucketCache = buckets;
                    deferred.resolve(bucketCache);
                }
            });
        }

        return deferred.promise;
    };

    /**
     * Get bucket name
     * @return string
     */
    Bucket.prototype.getName = function() {
        return this._bucket.Name || "";
    };

    /**
     * Get Objects in this bucket
     * @return Array<Item>
     */
    Bucket.prototype.getItems = function() {
        var deferred = when.defer(),
            that     = this,
            name     = this.getName(),
            contents = [];

        if ( this._objects) {
            deferred.resolve(this._objects);
        } else {
            aws.listObjects({"Bucket": name}, function(err, data) {
                if ( err ) {
                    deferred.reject(err);
                } else {
                    data.Contents.forEach(function(obj) {
                        contents.push(new Item(obj));
                    });
                    that._objects = contents;
                    deferred.resolve(contents);
                }
            });
        }

        return deferred.promise;
    };
})(s3, this);

(function(aws, global) {

    global.Item = Item;

    /**
     * Constructor
     */
    function Item(obj) {
        this.obj = obj;
    }

    Item.prototype.getName = function() {
    
    };
})(aws, this);

var request;
var activeBucket;

request = Bucket.getBucketList();
request.done(function(buckets) {
    console.log(buckets);
    var menu = document.querySelector('.buckets > ul');
    buckets.forEach(function(bucket, index) {
        var item = document.createElement('li'),
            a    = document.createElement('a');

        if ( index === 0 ) {
            item.setAttribute('class', 'active');
        }
        console.log(bucket.getName());
        
        a.appendChild(document.createTextNode(bucket.getName()));
        item.appendChild(a);
        item.setAttribute('data-bucketname', bucket.getName());
        menu.appendChild(item);
    });
});

//s3.listBuckets({}, function(err, data) {
//    console.log(data);
//});
