var config = {

    "accessKeyId":     "AKIAJDN3F53EQUB2N3CA",
    "secretAccessKey": "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"

};

var aws    = require('aws-sdk');
var when   = require('when');

aws.util.isBrowser = function() { return false; };
var s3 = new aws.S3(config);

(function(global) {

    global.Breadcrumb = ({

        node: document.querySelector('.breadcrumb'),
        items: null,
        active: null,

        init: function() {
            this.items = this.node.getElementsByTagName('a');

            return this;
        },

        getCurrentDirectory: function() {
            var paths = [];

            [].forEach.call(this.items, function(item) {
                paths.push(item.getAttribute('href').slice(1));
            });

            return ( paths.length > 0 ) ? paths.join('/') + '/' : '';
        },

        append: function(pathName) {
            var li = document.createElement(li),
                a  = document.createElement(a);
            
            if ( this.active ) {
                this.active.classList.remove('active');
            }

            li.classList.add('active');
            a.setAttribute('href', '#' + pathName);

            li.appendChild(a);
            this.node.appendChild(li);
        },

        remove: function(pathName) {
            var finded = false,
                node   = this.node;

            [].forEach.call(this.items, function(item) {
                if ( finded === true || item.getAttribute('href').slice(1) === pathName ) {
                    finded = true;
                    node.removeChild(item.parentNode);
                }
            });

            if ( this.items.length > 0 ) {
                this.items[this.items.length - 1].parentNode.classList.add('active');
            }
        }
        
    }).init();




    
})(this);

(function(global) {

    var layer  = document.getElementById('layer');
    var notify = layer.querySelector('p');

    global.Layer = ({
        init: function() { return this; },

        show: function(isLoading, msg) {
            layer.style.display = 'block';
            if ( msg ) {
                notify.textContent = msg;
            }
            if ( !!isLoading ) {
                layer.classList.add('loading');
            }
        },

        hide: function() {
            layer.style.display = 'none';
            layer.classList.remove('loading');
            notify.textContent = '';
        },

        notify: function(msg) {
            notify.textContent = msg;
        }
    }).init();
})(this);

(function(aws, global) {

    global.Bucket = Bucket;

    var bucketCache = [];

    /**
     * Constructor
     * @param AWS.S3 instance
     */
    function Bucket(bucketObject) {
        this._bucket  = bucketObject;
        this._objects = null;
    }

    /**
     * Get Bucket list
     * @access static
     * @return deferred
     */
    Bucket.getBucketList = function() {
        var deferred = when.defer(),
            buckets  = [];

        if ( bucketCache.length > 0 ) {
            deferred.resolve(bucketCahce);
        } else {
            aws.listBuckets({}, function(err, data) {
                if ( err ) {
                    deferred.reject(err);
                } else {
                    data.Buckets.forEach(function(bucket) {
                        buckets.push(new Bucket(bucket));
                    });
                    bucketCache = buckets;
                    deferred.resolve(bucketCache);
                }
            });
        }

        return deferred.promise;
    };

    /**
     * Get bucket name
     * @return string
     */
    Bucket.prototype.getName = function() {
        return this._bucket.Name || "";
    };

    /**
     * Get Objects in this bucket
     * @return Array<Item>
     */
    Bucket.prototype.getItems = function() {
        var deferred = when.defer(),
            that     = this,
            name     = this.getName(),
            contents = [];

        if ( this._objects ) {
            deferred.resolve(this._objects);
        } else {
            aws.listObjects({"Bucket": name}, function(err, data) {
                if ( err ) {
                    deferred.reject(err);
                } else {
                    that._objects = new ItemList(data.Contents);
                    deferred.resolve(that._objects);
                }
            });
        }

        return deferred.promise;
    };
})(s3, this);

(function(global) {

    global.ItemList = ItemList;

    /**
     * Constructor
     */
    function ItemList(listObjects) {
        this.items = listObjects.map(function(item) {
            return new Item(item);
        });
    }

    ItemList.prototype.getFilteredItems = function() {
        var currentDir = Breadcrumb.getCurrentDirectory(),
            that       = this;

        return this.items.filter(function(item) {
            return that.compareDirectoryPath(item, currentDir);
        });
    };

    ItemList.prototype.compareDirectoryPath = function(item, currentDir) {
        var path = item.getName().replace(currentDir, '').replace(/\/$/, '');

        return  ( path.indexOf('/') === -1 );
        //return !( path.indexOf('/') !== -1 || ( path === '' && item.itemType === 'directory' ) );
    };

    ItemList.prototype.getItemElements = function() {
        var fragment = document.createDocumentFragment();

        this.getFilteredItems().forEach(function(item) {
            fragment.appendChild(item.getElement());
        });

        return fragment;
    };
})(this);

(function(global) {

    var Path = require('path');

    global.Item = Item;

    /**
     * Constructor
     */
    function Item(obj) {
        this.obj      = obj;
        this.element  = null;
        this.itemType = this._detectItemType(obj.Key);
    }

    Item.prototype.getName = function() {
        return this.obj.Key;
    };

    Item.prototype.getElement = function() {
        var txt;

        if ( ! this.element ) {
            this.element = document.createElement('div');
            this.element.classList.add('icon-' + this.itemType);
            txt = document.createElement('p');
            txt.appendChild(document.createTextNode(this.obj.Key.replace(/\/$/, '')));
            this.element.appendChild(txt);
        }

        return this.element;
    };

    Item.prototype._detectItemType = function(name) {
        var types = {
            'directory': /.+\/$/,
            'image': /.+\.(gif|jpe?g|png)$/,
            'file': /.*/
        }, type;

        Object.keys(types).forEach(function(key) {
            if ( !type && types[key].test(name) ) {
                type = key;
            }
        });

        return type;
    };
})(this);

var request;
var activeBucket;

Layer.show(true, 'Bucket情報を取得中...');

request = Bucket.getBucketList();
request.done(function(buckets) {
    var menu = document.querySelector('.buckets > ul');

    buckets.forEach(function(bucket, index) {
        var item = document.createElement('li'),
            a    = document.createElement('a');

        if ( index === 1 ) {
            item.setAttribute('class', 'active');
            activeBucket = bucket;
        }
        
        a.appendChild(document.createTextNode(bucket.getName()));
        item.appendChild(a);
        item.setAttribute('data-bucketname', bucket.getName());
        menu.appendChild(item);
    });

    Layer.notify(activeBucket.getName() + 'のファイル一覧を取得中...');

    request = activeBucket.getItems();
    request.done(function(items) {
        console.log(items);
        var area = document.getElementById('bucketObjects');
        console.log(items.getItemElements());

        area.appendChild(items.getItemElements());
        Layer.hide();
    });
});
