var aws    = require('aws-sdk');
var when   = require('when');

aws.util.isBrowser = function() { return false; };
var s3 = new aws.S3();

(function(aws, global) {

    global.Setting = ({
        trigger:       document.querySelector('.config'),
        form:          document.getElementById('setting'),
        saveButton:    document.querySelector('#setting button'),
        opened:        false,
        savedCallback: null,

        init: function() {
            this.trigger.addEventListener('click', this, false);
            this.saveButton.addEventListener('click', this);

            return this;
        },
        
        handleEvent: function(evt) {
            var target = evt.target;

            if ( target === this.trigger ) {
                if ( this.opened === false ) {
                    this.show();
                } else {
                    this.hide();
                }
                this.opened = !this.opened;
            } else if ( target.webkitMatchesSelector('#setting button') ) {
                evt.preventDefault();
                this.save();
            }
        },

        show: function(savedCallback) {
            Layer.show(false);
            layer.addRelationElement(this.form);
            this.form.style.display = 'block';
            this.setErrorMessage('');
            this.setButtonState();

            this.savedCallback = savedCallback || null;
        },

        hide: function() {
            Layer.hide();
            this.form.style.display = 'none';
        },

        getConfigObject: function() {
            var keyId  = localStorage.getItem('accessKeyId'),
                secret = localStorage.getItem('secretAccessKey');

            if ( keyId && secret ) {
                this.form.querySelector('#inputAccessKey').value       = keyId;
                this.form.querySelector('#inputSecretAccessKey').value = secret;
                return {
                    accessKeyId:     keyId,
                    secretAccessKey: secret
                };
            } else {
                return null;
            }
        },

        setErrorMessage: function(msg) {
            this.form.querySelector('#settingError').textContent = msg;
        },

        setButtonState: function(status) {
            var button = this.saveButton;

            button.classList.remove('btn-danger');
            button.classList.remove('btn-success');
            button.classList.remove('btn-primary');
            
            switch ( status ) {
                case 'saved':
                    button.classList.add('btn-success');
                    button.textContent = 'saved!';
                    break;

                case 'error':
                    button.classList.add('btn-danger');
                    break;

                default:
                    button.classList.add('btn-primary');
                    button.textContent = 'save';
                    break;
            }
        },

        save: function() {
            var keyId  = this.form.querySelector('#inputAccessKey').value,
                secret = this.form.querySelector('#inputSecretAccessKey').value,
                that   = this;

            if ( keyId === '' || secret === '' ) {
                this.setErrorMessage('Both value must not be empty.');
                this.setButtonState('error');
                return;
            }

            localStorage.setItem('accessKeyId', keyId);
            localStorage.setItem('secretAccessKey', secret);
            aws.config.update({
                accessKeyId:     keyId,
                secretAccessKey: secret
            });

            this.setErrorMessage('');
            this.setButtonState('saved');

            setTimeout(function() {
                Layer.hide();
                that.hide();
                if ( typeof that.savedCallback === 'function' ) {
                    that.savedCallback();
                    that.savedCallback = null;
                }
            }, 1000);
        }
    }).init();

})(s3, this);

(function(global) {

    global.SideMenu = ({
        menu: document.querySelector('.buckets > .nav'),

        init: function() {
            this.menu.addEventListener('click', this, false);
            return this;
        },

        handleEvent: function(evt) {
            evt.preventDefault();
            var item       = evt.target.parentNode,
                bucketName = item.getAttribute('data-bucketname');

            this.setActiveElement(item);
            Main.currentBucket = bucketName;
            Main.loadObjects(bucketName, '/');
        },

        append: function(item, active) {
            this.menu.appendChild(item);

            if ( active ) {
                this.setActiveElement(item);
            }
        },

        setActiveElement: function(item) {
            if ( this.activeMenu ) {
                this.activeMenu.classList.remove('active');
            }
            item.classList.add('active');
            this.activeMenu = item;
            localStorage.setItem('selectedBucket', item.getAttribute('data-bucketname'));
        }
    }).init();
})(this);

(function(global) {

    global.Breadcrumb = ({

        node: document.querySelector('.breadcrumb'),
        items: null,
        active: null,

        init: function() {
            this.items = this.node.getElementsByTagName('a');

            return this;
        },

        getCurrentDirectory: function() {
            var paths = [];

            [].forEach.call(this.items, function(item) {
                paths.push(item.getAttribute('href').slice(1));
            });

            return ( paths.length > 0 ) ? paths.join('/') + '/' : '';
        },

        append: function(pathName) {
            var li = document.createElement('li'),
                a  = document.createElement('a');
            
            if ( this.active ) {
                this.active.classList.remove('active');
            }

            li.classList.add('active');
            li.setAttribute('data-directoryname', pathName);
            a.setAttribute('href', 'javascript:void(0)');
            a.appendChild(document.createTextNode(pathName));

            li.appendChild(a);
            this.node.appendChild(li);
        },

        remove: function(pathName) {
            var finded = false,
                node   = this.node;

            [].forEach.call(this.items, function(item) {
                if ( finded === true || item.getAttribute('href').slice(1) === pathName ) {
                    finded = true;
                    node.removeChild(item.parentNode);
                }
            });

            if ( this.items.length > 0 ) {
                this.items[this.items.length - 1].parentNode.classList.add('active');
            }
        }
        
    }).init();




    
})(this);

(function(global) {

    var layer  = document.getElementById('layer');
    var notify = layer.querySelector('p');
    var relations = [];

    global.Layer = ({
        init: function() {
            layer.addEventListener('click', this.hide, false);

            return this;
        },

        show: function(isLoading, msg) {
            layer.style.display = 'block';
            if ( msg ) {
                notify.textContent = msg;
            }
            if ( !!isLoading ) {
                layer.classList.add('loading');
            }
        },

        addRelationElement: function() {
            relations = [].slice.call(arguments);
        },

        hide: function() {
            layer.style.display = 'none';
            layer.classList.remove('loading');
            notify.textContent = '';

            if ( relations.length > 0 ) {
                relations.forEach(function(node) {
                    node.style.display = 'none';
                });
                relations.length = 0;
            }
        },

        notify: function(msg) {
            notify.textContent = msg;
        }
    }).init();
})(this);

(function(aws, global) {

    global.Bucket = Bucket;

    var bucketCache = [];

    /**
     * Constructor
     * @param AWS.S3 instance
     */
    function Bucket(bucketObject) {
        this._bucket  = bucketObject;
        this._objects = null;
    }

    /**
     * Get Bucket list
     * @access static
     * @return deferred
     */
    Bucket.getBucketList = function() {
        var deferred = when.defer(),
            buckets  = [];

        if ( bucketCache.length > 0 ) {
            deferred.resolve(bucketCahce);
        } else {
            aws.listBuckets({}, function(err, data) {
                if ( err ) {
                    deferred.reject(err);
                } else {
                    data.Buckets.forEach(function(bucket) {
                        buckets.push(new Bucket(bucket));
                    });
                    bucketCache = buckets;
                    deferred.resolve(bucketCache);
                }
            });
        }

        return deferred.promise;
    };

    /**
     * Get bucket name
     * @return string
     */
    Bucket.prototype.getName = function() {
        return this._bucket.Name || "";
    };

    /**
     * Get Objects in this bucket
     * @param String dir
     * @return Array<Item>
     */
    Bucket.prototype.getItems = function(dir) {
        var deferred = when.defer(),
            that     = this,
            name     = this.getName(),
            contents = [],
            marker   = (dir || '/').replace(/^\//, '');

        if ( this._objects ) {
            deferred.resolve(this._objects);
        } else {
            aws.listObjects({"Bucket": name, "Marker": marker}, function(err, data) {
                if ( err ) {
                    deferred.reject(err);
                } else {
                    that._objects = new ItemList(data.Contents);
                    deferred.resolve(that._objects);
                }
            });
        }

        return deferred.promise;
    };
})(s3, this);

(function(global) {

    global.ItemList = ItemList;

    /**
     * Constructor
     */
    function ItemList(listObjects) {
        this.items = listObjects.map(function(item) {
            return new Item(item);
        });
    }

    ItemList.prototype.getFilteredItems = function() {
        var currentDir = Breadcrumb.getCurrentDirectory(),
            that       = this;

        return this.items.filter(function(item) {
            return that.compareDirectoryPath(item, currentDir);
        });
    };

    ItemList.prototype.compareDirectoryPath = function(item, currentDir) {
        var path = item.getName().replace(currentDir, '').replace(/\/$/, '');

        return  ( path.indexOf('/') === -1 );
        //return !( path.indexOf('/') !== -1 || ( path === '' && item.itemType === 'directory' ) );
    };

    ItemList.prototype.getItems = function() {
        return this.getFilteredItems();
    };

    ItemList.prototype.getItemElements = function() {
        var list = [];

        this.getFilteredItems().forEach(function(item) {
            list.push(item.getElement());
        });

        return list;
    };
})(this);

(function(global) {

    var Path = require('path');

    global.Item = Item;

    /**
     * Constructor
     */
    function Item(obj) {
        this.obj      = obj;
        this.element  = null;
        this.itemType = this._detectItemType(obj.Key);
    }

    Item.prototype.getName = function() {
        return this.obj.Key;
    };

    Item.prototype.getElement = function() {
        var txt;

        if ( ! this.element ) {
            this.element = document.createElement('div');
            this.element.classList.add('icon-' + this.itemType);
            txt = document.createElement('p');
            txt.appendChild(document.createTextNode(this.obj.Key.replace(/\/$/, '')));
            this.element.appendChild(txt);
        }

        return this.element;
    };

    Item.prototype._detectItemType = function(name) {
        var types = {
            'directory': /.+\/$/,
            'image': /.+\.(gif|jpe?g|png)$/,
            'file': /.*/
        }, type;

        Object.keys(types).forEach(function(key) {
            if ( !type && types[key].test(name) ) {
                type = key;
            }
        });

        return type;
    };
})(this);

(function(global) {

    fileListCache = {};

    global.FileList = ({
        element: document.getElementById('bucketObjects'),

        init: function() {
            return this;
        },

        getByCache: function(key, dir) {
            if ( key in fileListCache ) {
                return ( dir in fileListCache[key] ) ? fileListCache[key][dir] : null;
            }
            return null;
        },

        purgeCache: function(key, dir) {
            if ( key in fileListCache ) {
                if ( dir ) {
                    if ( dir in fileListCache[key] ) {
                        delete fileListCache[key][dir];
                    }
                } else {
                    delete fileListCache[key];
                }
            }
        },

        reload: function(list, dir) {
            var element = this.element,
                cache   = [];

            while ( element.firstChild ) {
                element.removeChild(element.firstChild);
            }

            list.forEach(function(item) {
                var instance;

                if ( ! (item instanceof FileItem) ) {
                    element.appendChild(item.getElement());
                    cache.push(new FileItem(item));
                } else  {
                    element.appendChild(item.getElement());
                    cache.push(item);
                }
            });

            if ( ! (fileListCache[Main.currentBucket]) ) {
                fileListCache[Main.currentBucket] = {};
            }
            fileListCache[Main.currentBucket][dir] = cache;
        }
    }).init();


    function FileItem(node) {
        this.obj      = node.obj;
        this.element  = node.element;
        this.itemType = node.itemType;
        
        Item.prototype.getElement.call(this);
        this.initialize();
    }

    FileItem.prototype.getElement = function() {
        return this.element;
    };
    FileItem.prototype.initialize = function() {
        console.log('Initialize');
        console.log(this.element);
        this.element.addEventListener('click', this);
    };
    FileItem.prototype.handleEvent = function(evt) {
        console.log('Clicked');
    };

})(this);


var Main = {
    buckets: {},
    currentBucket: null,

    init: function() {
        var that     = this,
            selected = localStorage.getItem('selectedBucket');

        Layer.show(true, 'Bucket情報を取得中...');

        Bucket.getBucketList()
        .done(function(buckets) {
            var menu = document.querySelector('.buckets > ul');

            if ( buckets.length === 0 ) {
                return alert('Buckets not found.\nPlease create bucket on AWS management console.');
            }
    
            buckets.forEach(function(bucket, index) {
                var item     = document.createElement('li'),
                    a        = document.createElement('a'),
                    name     = bucket.getName(),
                    isActive = false;
    
                if ( selected === name ) {
                    item.setAttribute('class', 'active');
                    isActive = true;
                    that.currentBucket = name;
                    SideMenu.setActiveElement(item);
                }
                
                a.appendChild(document.createTextNode(name));
                a.setAttribute('href', name);
                item.appendChild(a);
                item.setAttribute('data-bucketname', name);
                menu.appendChild(item, isActive);
                that.buckets[name] = bucket;
            });

            if ( ! that.currentBucket ) {
                that.currentBucket = buckets[0].getName();
                SideMenu.setActiveElement(menu.firstElementChild);
            }
            
            that.loadObjects(that.currentBucket, '/');
            Breadcrumb.append('/');
        });
    },

    loadObjects: function(bucketName, dir) {
        var bucket = this.buckets[bucketName],
            cache;

        if ( ! bucket ) {
            return alert('Error: bucket "' + bucketName + '" not found');
        }

        Layer.show(true, bucket.getName() + 'のファイル一覧を取得中...');
    
        cache = FileList.getByCache(bucketName, dir);
        if ( cache !== null ) {
            console.log('Loaded from cache' + bucketName + '/dir');
            FileList.reload(cache, dir);
            Layer.hide();
        } else {
            bucket.getItems(dir)
            .done(function(items) {
                FileList.reload(items.getItems(), dir);
                Layer.hide();
            });
        }
    }
};

var config = Setting.getConfigObject();

if ( config === null ) {
    Setting.show(Main.init);
} else {
    s3.config.update(config);
    Main.init();
}
